
/*!
 * function
 * JavaScript function utilities library
 * Copyright (c) 2011 Enrico Marino <enrico.marino@email.com>
 * MIT License
 */

 !(function (exports) {

  var undefined
    , slice = [].slice
    ;

  exports.f = {};

  /**
   * Library version.
   */
  f.version = '0.1.0';

  /**
   * Bind 'self' to 'context'.
   *
   * @param {Function} self function
   * @param {Object} context context
   * @return {Function} function 'self' binded to 'context'
   * @api public
   */

  f.bind = function (self, context) {
    return self.bind(context);
  };

  /**
   * Delay execution of 'self' by 'wait' milliseconds.
   *
   * @param {Function} self function
   * @param {Number} wait millisecond of delay
   * @api public
   */

  f.delay = function (self, wait) {
    var args = slice.call(arguments, 2);

    setTimeout(function () {
      return self.apply(self, args);
    }, wait);
  };

  /**
   * Return a function that execute 'self' once.
   *
   * @param {Function} self function
   * @param {Object} context context
   * @return {Function} function that execute 'self' once
   * @api public
   */

  f.once = function (self, context) {
    var first = true
      , memo
      ;

    return function () {
      if (first) {
        first = false;
        memo = self.apply(context, arguments);
      }
      return memo;
    };
  };

  /**
   * Return a function that can execute 'self' only 'times' times.
   *
   * @param {Function} self function
   * @param {Number} times times
   * @return {Function} function that execute 'self' only 'times' times
   * @api public
   */

  f.after = function (self, times) {
    return function() {
      if (--times < 1) {
        return self.apply(this, arguments);
      }
    };
  };

 }(this));